pragma solidity ^0.8.0;

contract MarksManagmtSys
{
    int per;
	int[] public data; 
	struct Student
	{
		int ID;
		string fName;
		string lName;
		int marks;
	
	}
    event Log(string func, address sender, uint value);
	address owner;
	int public stdCount = 0;
	mapping(int => Student) public stdRecords;

	modifier onlyOwner
	{
		require(owner == msg.sender);
		_;
	}

	constructor()
	{
		owner=msg.sender;
	}

	function addNewRecords(int _ID, string memory _fName, string memory _lName, int _marks) public onlyOwner				
	{
		stdCount = stdCount + 1;
		stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);
	}
	
	function bonusMarks(int _ID, int _bonus) public onlyOwner
	{
		stdRecords[_ID].marks = stdRecords[_ID].marks + _bonus;

	}

    function percentage(int _ID) public onlyOwner
    {
        per = stdRecords[_ID].marks * 100 / 5;
        data.push(per);
    }

	fallback() external payable 
	{
		emit Log("fallback", msg.sender, msg.value);
	}  
}